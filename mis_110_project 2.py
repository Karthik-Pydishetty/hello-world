# -*- coding: utf-8 -*-
"""MIS 110 project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BssTgSnzT7gZnBpDnOowqNbuR9F7N_8A
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

"""**Question: How can one create an optimized portfolio for maximum returns at a given risk level?**"""

# Get historical price data for 10 stocks
AAPLdataset = pd.read_csv('/content/AAPL (1).csv')
MSFTdataset = pd.read_csv('/content/MSFT.csv')
TSLAdataset = pd.read_csv('/content/TSLA.csv')
GOOGdataset = pd.read_csv('/content/GOOG.csv')
NVDAdataset = pd.read_csv('/content/NVDA.csv')
METAdataset = pd.read_csv('//content/META (1).csv')
BRKBdataset = pd.read_csv('/content/BRK-B.csv')
LLYdataset = pd.read_csv('/content/LLY.csv')
Vdataset = pd.read_csv('/content/V.csv')
UNHdataset = pd.read_csv('/content/UNH.csv')

AAPlclose = AAPLdataset[['Adj Close']]
MSFTclose = MSFTdataset[['Adj Close']]
TSLAclose = TSLAdataset[['Adj Close']]
GOOGclose = GOOGdataset[['Adj Close']]
NVDAclose = NVDAdataset[['Adj Close']]
METAclose = METAdataset[['Adj Close']]
BRKBclose = BRKBdataset[['Adj Close']]
LLYclose = LLYdataset[['Adj Close']]
Vclose = Vdataset[['Adj Close']]
UNHclose = UNHdataset[['Adj Close']]

# Calculate volatility
AAPL_dr = AAPlclose.pct_change()
MSFT_dr = MSFTclose.pct_change()
TSLA_dr = TSLAclose.pct_change()
GOOG_dr = GOOGclose.pct_change()
NVDA_dr = NVDAclose.pct_change()
META_dr = METAclose.pct_change()
BRKB_dr = BRKBclose.pct_change()
LLY_dr = LLYclose.pct_change()
V_dr = Vclose.pct_change()
UNH_dr = UNHclose.pct_change()

AAPLv = AAPL_dr.std() * np.sqrt(252)
MSFTv = MSFT_dr.std() * np.sqrt(252)
TSLAv = TSLA_dr.std() * np.sqrt(252)
GOOGv = GOOG_dr.std() * np.sqrt(252)
NVDAv = NVDA_dr.std() * np.sqrt(252)
METAv = META_dr.std() * np.sqrt(252)
BRKBv = BRKB_dr.std() * np.sqrt(252)
LLYv = LLY_dr.std() * np.sqrt(252)
Vv = V_dr.std() * np.sqrt(252)
UNHv = UNH_dr.std() * np.sqrt(252)

print("APPL volatlity: ", AAPLv)
print("MSFT volatility: ", MSFTv)
print("TSLA volatility: ", TSLAv)
print("GOOG volatility: ", GOOGv)
print("NVDA volatility: ", NVDAv)
print("META volatility: ", METAv)
print("BRKB volatility: ", BRKBv)
print("LLY volatility: ", LLYv)
print("V volatility: ", Vv)
print("UNH volatility: ", UNHv)

# Next steps, grab the PE Ratio for each stock. <- One metric for a performance
# Get 3 metrics (PE Ratio, Volatility, Sales Growth Potential (Yahoo Finance -> Analysis Section))
# Sales Growth Potential Current Year vs Next Year (Take difference)
# If the Sales growth potiential is -100% to -20%, maybe not the best buy
# If the Sales growth potiential is -20% to 30%, low risk investor
# If the Sales growth potiential is 30% to 100%, high risk investor
# High PE ratio - overvalued -> high risk investor (vice versa) (greater than 5 is high and less than 5 is low)
#volaitility > .4 is high
# Risk based on 2 out of the 3 risk metrics

# high volatility
# TSLA, NVDA, META,
# high sales growth potential
# NVDA,
#High PE ratio
#TSLA, META

#High risk stocks - TSLA, NVDA, META

risk_input = input("Would you like to be a high-risk investor or a low-risk investor?: ")
available_stocks = ['AAPL', 'MSFT', 'TSLA', 'GOOG', 'NVDA', 'META', 'BRKB', 'LLY', 'V', 'UNH']
print(available_stocks)
Selected_stocks = []
Stock1, Stock2, Stock3, Stock4, Stock5 = input("Please select 5 of the stocks above that you would like to invest in seprated by a comma: ").upper().split(",")
Selected_stocks.append(Stock1)
Selected_stocks.append(Stock2)
Selected_stocks.append(Stock3)
Selected_stocks.append(Stock4)
Selected_stocks.append(Stock5)


# Checking to see if the same stock was entered twice
Stocks_set = set(Selected_stocks)
if len(Selected_stocks) != len(Stocks_set):
  print("You have entered duplicate stocks")
# Check to see if it is a valid stock
for i in Selected_stocks:
  if i not in available_stocks:
    print("You have entered at least one invalid stock")

print("Here is the optimal portfolio for your risk tolerance and the stocks you have selected")

import numpy as np
high_risk = ['TSLA', 'NVDA', 'META']
high_risk_stock = []
low_risk_stock = []
for i in Selected_stocks:
  if i in high_risk:
    high_risk_stock.append(i)
  else:
    low_risk_stock.append(i)
  if risk_input.lower() == "high" and len(high_risk_stock) == 0 and len(low_risk_stock) == 5:
    y = np.array([20, 20, 20, 20, 20])
    mylabels = [low_risk_stock[0] + ' - 20%', low_risk_stock[1] + ' - 20%', low_risk_stock[2] + ' - 20%', low_risk_stock[3] + ' - 20%',low_risk_stock[4] + ' - 20%' ]
    plt.pie(y, labels = mylabels)
    plt.show()
  elif risk_input.lower() == "high" and len(high_risk_stock) == 1 and len(low_risk_stock) == 4:
    y = np.array([50, 12.5, 12.5, 12.5, 12.5])
    mylabels = [high_risk_stock[0] + ' - 50%', low_risk_stock[0] + ' - 12.5%', low_risk_stock[1] + ' - 12.5%', low_risk_stock[2] + ' - 12.5%', low_risk_stock[3] + ' - 12.5%']
    plt.pie(y, labels = mylabels)
    plt.show()
  elif risk_input.lower() == "high" and len(high_risk_stock) == 2 and len(low_risk_stock) == 3:
    y = np.array([35, 35, 10, 10, 10])
    mylabels = [high_risk_stock[0] + ' - 35%', high_risk_stock[1] + ' - 35%', low_risk_stock[0] + ' - 10%', low_risk_stock[1] + ' - 10%', low_risk_stock[2] + ' - 10%']
    plt.pie(y, labels = mylabels)
    plt.show()
  elif risk_input.lower() == "high" and len(high_risk_stock) == 3 and len(low_risk_stock) == 2:
    y = np.array([25, 25, 25, 12.5, 12.5])
    mylabels = [high_risk_stock[0] + ' - 25%', high_risk_stock[1] + ' - 25%', high_risk_stock[2] + ' - 25%', low_risk_stock[0] + ' - 12.5%', low_risk_stock[1] + ' - 12.5%']
    plt.pie(y, labels = mylabels)
    plt.show()
  elif risk_input.lower() == "low" and len(high_risk_stock) == 3 and len(low_risk_stock) == 2:
    y = np.array([35, 35, 10, 10, 10])
    mylabels = [low_risk_stock[0] + ' - 35%', low_risk_stock[1] + ' 35%', high_risk_stock[0] + ' - 10%', high_risk_stock[1] + ' - 10%', high_risk_stock[2] + ' - 10%']
    plt.pie(y, labels = mylabels)
    plt.show()
  elif risk_input.lower() == "low" and len(high_risk_stock) == 2 and len(low_risk_stock) == 3:
    y = np.array([25, 25, 25, 12.5, 12.5])
    mylabels = [low_risk_stock[0] + ' - 25%', low_risk_stock[1] + ' - 25%', low_risk_stock[2] + ' - 12.5%', high_risk_stock[0] + ' - 12.5%', high_risk_stock[1] + ' - 12.5%']
    plt.pie(y, labels = mylabels)
    plt.show()
  elif risk_input.lower() == "low" and len(high_risk_stock) == 1 and len(low_risk_stock) == 4:
    y = np.array([50, 12.5, 12.5, 12.5, 12.5])
    mylabels = [high_risk_stock[0] + ' - 50%', low_risk_stock[0] + ' - 12.5%', low_risk_stock[1] + ' - 12.5%', low_risk_stock[2] + ' - 12.5%', low_risk_stock[3] + ' - 12.5%']
    plt.pie(y, labels = mylabels)
    plt.show()
  elif risk_input.lower() == "low" and len(high_risk_stock) == 0 and len(low_risk_stock) == 5:
    y = np.array([20, 20, 20, 20, 20])
    mylabels = [low_risk_stock[0] + ' - 20%', low_risk_stock[1] + ' - 20%', low_risk_stock[2] + ' - 20%', low_risk_stock[3] + ' - 20%',low_risk_stock[4] + ' - 20%']
    plt.pie(y, labels = mylabels)
    plt.show()